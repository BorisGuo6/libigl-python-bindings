name: Pip build

on:
  push:
    branches:    
      - master
  pull_request:
    branches:
      - master

jobs:
  build_sdist:
    name: Build SDist
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true

    - name: Build SDist
      run: pipx run build --sdist

    - name: Check metadata
      run: pipx run twine check dist/*

    - uses: actions/upload-artifact@v2
      with:
        path: dist/*.tar.gz

  build_wheels:
    strategy:
      fail-fast: false
      matrix:
        include:
          - runs-on: ubuntu-latest
            cibw-arch: manylinux_x86_64
          - runs-on: macos-latest
            cibw-arch: macosx_x86_64
          - runs-on: macos-latest
            cibw-arch: macosx_arm64
          - runs-on: windows-latest
            cibw-arch: win_amd64

    name: Build wheels ${{ matrix.cibw-arch }}
    runs-on: ${{ matrix.runs-on }}

    env:
      CIBW_BUILD_VERBOSITY: 3
      # This is very dubious... It *may* work because these are just cpp libraries that should not depend on the python version. Still, super-dubious.
      CIBW_BEFORE_BUILD_WINDOWS: "python -m pip install delvewheel"
      CIBW_REPAIR_WHEEL_COMMAND_WINDOWS: "python -m delvewheel repair --no-mangle-all --add-path build\\temp.win-amd64-3.6\\Release;build\\temp.win-amd64-3.6\\Release\\Release;build\\temp.win-amd64-3.6\\Release\\_deps\\gmp-src\\lib;build\\temp.win-amd64-3.6\\Release\\_deps\\mpfr-src\\lib -w {dest_dir} {wheel} "
      # CIBW_REPAIR_WHEEL_COMMAND_WINDOWS: "cd C: && cmd //c tree //F"
      #CIBW_SKIP: "*-win32 *_i686 pp* cp36* cp311* *musllinux*" # Skip 32-bit buildsa and PyPy, and 3.6(scipy) and 3.11(numpy) *musllinux*(scipy)
      CIBW_SKIP: "*-win32 *_i686 pp* cp36* cp37* cp38* cp39* cp310* *musllinux*"
      CIBW_BUILD: "cp311*"
      CIBW_TEST_COMMAND: "python {project}/tests/test_basic.py {project}/data/"
      CIBW_TEST_SKIP: "*-macosx_arm64"
      CIBW_ENVIRONMENT: "MAX_JOBS=2"


    steps:
      - uses: actions/checkout@v3
        with:
          submodules: 'recursive'

      - uses: actions/setup-python@v2
        name: Install Python
        with:
          python-version: '3.7'

      - name: Install cibuildwheel
        run: |
          python -m pip install --upgrade pip
          python -m pip install cibuildwheel==2.12.0
          
      # - name: Test
      #   run: |
      #     python -m pip install .

      - name: Configure cibuildwheel
        shell: bash
        run: |
          CMAKE_ARCH="${{ matrix.cibw-arch == 'win32' && '-A Win32' || '' }}"
          CMAKE_OSX_ARCHITECTURES=${{ matrix.cibw-arch == 'macosx_x86_64' && 'x86_64' || matrix.cibw-arch == 'macosx_arm64' && 'arm64' || matrix.cibw-arch == 'macosx_universal2' && '"arm64;x86_64"' || '' }}
          echo "CIBW_ARCHS_MACOS=x86_64 arm64 universal2" >> $GITHUB_ENV
          echo "CIBW_BUILD=*-${{ matrix.cibw-arch }}" >> $GITHUB_ENV
          echo "CIBW_ENVIRONMENT_MACOS=CMAKE_OSX_ARCHITECTURES=\"$CMAKE_OSX_ARCHITECTURES\"" >> $GITHUB_ENV

      - name: Build wheels
        run: |
          python -m cibuildwheel --output-dir wheelhouse

      # Upload binaries to github
      - uses: actions/upload-artifact@v2
        with:
          path: |
            ./wheelhouse/*.whl 
            ./wheelhouse/*.tar.gz 

  # # Push the resulting binaries to pypi on a tag starting with 'v'
  upload_pypi:
    needs: [build_wheels]
    runs-on: ubuntu-latest
    # upload to PyPI on every tag starting with 'v'
    # if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/v')
    # alternatively, to publish when a GitHub Release is created, use the following rule:
    if: github.event_name == 'release' && github.event.action == 'published'
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: artifact
          path: dist

      - uses: pypa/gh-action-pypi-publish@v1.5.0
        with:
          user: __token__
          password: ${{ secrets.pypi_password }}
          skip_existing: true
          # To test: repository_url: https://test.pypi.org/legacy/
